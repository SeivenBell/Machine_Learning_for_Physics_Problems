===PROBLEM STATEMENT===

In this assignment you implement and train a fully visible Boltzmann machine on
data gathered from a 1-D classical Ising chain and use it to predict the model
couplers in absence of prior knowledge of the coupler values and only using the
model structure (1D closed chain) and the training dataset. The training
dataset is generated from a Monte-Carlo simulation of the unknown model. For
simplicity we assume the thermodynamic beta is 1 throughout.

The command to run your code should be of the following format.

--------------------------------
python main.py data/in.txt
--------------------------------

Any hyperparameters you choose to make available to the user (e.g., learning
rate, batch size, etc.) should be introduced through the following command.

--------------------------------
python main.py --help
--------------------------------

You may also choose to use json parameter files. Should you do so, a sample json
file and a clear documentation of its usage should be included in README.md
of your assignment folder.

==INPUT FILE==
in.txt:

Your code reads a training data file generated from a 1-D closed Ising chain
defined by the Hamiltonian

H(s)= - \sum_{i, j} J_{i, j} * s_i * s_j.

All couplers are generated from a choice of coupler strengths J_{i, j} not
available to your program. But we have some prior knowledge about the model as
follows:

(1) The length of each row in the training data file indicates the size of the
model. For a model with N spins, the spin configurations are provided in the
following fixed order:

s_0 s_1 s_2 ... s_{N-1}.

For example, in the provided in.txt the 1-D chain consists of 4 sites and the
first row -+-+ indicates the spin configuration

(s_0, s_1, s_2, s_3) = (-1, +1, -1, +1).


(2) The model is a 1-D closed loop. So all couplers are between spins s_i
and the nearest-neighbour spins s_{i+1 mod N} and s_{i-1 mod N}.

(3) All coupler values are either +1 or -1.



in.txt:
-+-+
++++
+-++
++++
-+++
++++
----
+---
-++-
-+--
-+--
-+++
+---
+---
-++-
-+++
+-++
-++-
+---
+--+
++++
+-++
-++-
-+--
--+-
----
+--+
+--+
-+++
-++-
----
+---
+--+
+-++
+--+
+-++
++++
+--+
-+++
++++
-+--
-+++
-+++
-+++
-++-
-+++
+-++
-+--
+-++
+++-


==OUTPUT FILE==

Your program generates its best guess of the correct values of all J_{i, j} in
the 1-D chain from which the training dataset was generated. The output is a
dictionary of couplers where keys are pairs of indices and values are the
predicted values for the couplers. For example for the provided dataset in.txt
an acceptable output of your program is

{(0, 1): -1, (1, 2): 1, (2, 3): 1, (3, 0): 1}.

Indeed, the example dataset in.txt provided here is generated using a
Monte-Carlo simulation of the 1-D Ising model of size 4 with the same couplers
as in the dictionary above.

Remark. In a verbose mode of your program, track the KL divergence of the
training dataset with respect to your generative model during the training and
save a plot of its values versus training epochs.

Remark. Your code should work for input files generated for any choice of system
size N.

Remark. Use the techniques you have learned in the class to make your model
stable; i.e., your model parameters should not diverge or NaN when its run for
a long time.



